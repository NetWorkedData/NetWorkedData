//=====================================================================================================================
//
//  ideMobi 2019©
//
//  Date		2019-4-12 18:20:22
//  Author		Kortex (Jean-François CONTART) 
//  Email		jfcontart@idemobi.com
//  Project 	NetWorkedData for Unity3D
//
//  All rights reserved by ideMobi
//
//=====================================================================================================================

#if UNITY_EDITOR
using System.Collections.Generic;
using System.Text;
//using BasicToolBox;

//=====================================================================================================================
namespace NetWorkedData
{
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public partial class NWDAppEnvironment
    {
        //-------------------------------------------------------------------------------------------------------------
        //private void CreatePHP_StaticAccountFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        //{
        //    //NWEBenchmark.Start();

        //    string tSignAccountKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().Account);
        //    string tSignHashKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().SignHash);
        //    string tRescueHashKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().RescueHash);
        //    string tAC = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().AC);
        //    string tReference = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().Reference);
        //    string tBan = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().Ban);


        //    StringBuilder tFile = new StringBuilder(string.Empty);
        //    tFile.AppendLine("<?php");
        //    tFile.AppendLine(Headlines());
        //    tFile.AppendLine("// ACCOUNT");
        //    tFile.AppendLine(NWD.K_CommentSeparator);

        //    tFile.AppendLine("$ereg_action = '/^("+NWDOperationWebAccountAction.rescue.ToString()+"|"+NWDOperationWebAccountAction.signout.ToString()+"|"+NWDOperationWebAccountAction.signin.ToString()+")$/';");
        //    tFile.AppendLine("$ereg_email = '/^([A-Z0-9a-z\\.\\_\\%\\+\\-]+@[A-Z0-9a-z\\.\\_\\%\\+\\-]+\\.[A-Za-z]{2,6})$/';");
        //    tFile.AppendLine("$ereg_password = '/^(.{24,64})$/';");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("if (!"+NWDError.PHP_errorDetected()+"())");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if (paramValue('action', 'action', $ereg_action, 'ACC01', 'ACC02')) // test if action is valid");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($action == '"+NWDOperationWebAccountAction.rescue.ToString()+"')");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("if ($action == '"+NWDOperationWebAccountAction.signin.ToString()+"')");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if (paramValue('shs', '"+NWD.K_WEB_SIGN_Key+"', $ereg_password, 'SHS01', 'SHS01'))");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('shs : '.$shs.'', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("$tQuerySign = 'SELECT `"+tSignAccountKey+"` FROM `'."+NWD.K_ENV+".'_"+NWDBasisHelper.BasisHelper<NWDAccountSign>().ClassNamePHP+"` WHERE `"+tSignHashKey+"` = \\''."+NWD.K_SQL_CON+"->real_escape_string($shs).'\\' AND `"+tSignHashKey+"` != \\'\\' AND `"+tAC+"` = 1;';");
        //    tFile.AppendLine("$tResultSign = "+NWD.K_SQL_CON+"->query($tQuerySign);");
        //    tFile.AppendLine("if (!$tResultSign)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuerySign.'', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("error('SGN15', true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tResultSign->num_rows == 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('SGN16',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("myLog('shs : '.$shs.' NO Row', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(" else if ($tResultSign->num_rows == 1)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine(" // ok I have one user");
        //    tFile.AppendLine("while ($tRowSign = $tResultSign->fetch_array())");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('shs : '.$shs.' find One Row', __FILE__, __FUNCTION__, __LINE__); ");
        //    tFile.AppendLine("// I get the password uuid hash");
        //    tFile.AppendLine("$tQuery = 'SELECT `"+tReference+"`, `"+tBan+"` FROM `'."+NWD.K_ENV+".'_"+NWDBasisHelper.BasisHelper<NWDAccount>().ClassNamePHP+"` WHERE `"+tReference+"` = \\''."+NWD.K_SQL_CON+"->real_escape_string($tRowSign['"+tSignAccountKey+"']).'\\' AND `"+tAC+"` = 1;';");
        //    tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    tFile.AppendLine("if (!$tResult)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuery.'', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("error('SGN15',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tResult->num_rows == 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// unknow user");
        //    tFile.AppendLine("error('SGN16',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else if ($tResult->num_rows == 1)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// ok I have one user");
        //    tFile.AppendLine("while ($tRow = $tResult->fetch_array())");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tRow['"+tBan+"'] > 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$ban = true;");
        //    tFile.AppendLine("error('ACC98',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("AccountIsSigned();");
        //    tFile.AppendLine("if ($uuid != $tRow['"+tReference+"'])");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("respondNeedReloadData();");
        //    tFile.AppendLine("respondUUID($tRow['"+tReference+"']);");
        //    tFile.AppendLine("respondAdd('newuser', true);");
        //    tFile.AppendLine("respondAdd('"+NWDOperationWebAccountAction.signin.ToString()+"', true);");
        //    //tFile.AppendLine("respondAdd('sign', 'loginpassword');");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('SGN17');");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("$uuid = $tRow['"+tReference+"'];");
        //    tFile.AppendLine("$token = NWDRequestTokenReset($uuid); // reset connexion to zero");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else //or more than one user with this sign … strange… I push an error, user must be unique for unique sign");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// to much users ...");
        //    tFile.AppendLine("error('SGN18',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("mysqli_free_result($tResult);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else //or more than one user with this email … strange… I push an error, user must be unique");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// to much users ...");
        //    tFile.AppendLine("error('SGN18', true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("myLog('shs : '.$shs.' Too Mush Row', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("mysqli_free_result($tResultSign);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("//---- SIGN OUT ----");
        //    tFile.AppendLine("// I sign in with the good value");
        //    tFile.AppendLine("if ($action == 'signout')");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("NWDRequestTokenReset ($uuid); // reset connexion to zero");
        //    tFile.AppendLine("respondAdd('"+NWDOperationWebAccountAction.signout.ToString()+"', true);");
        //    tFile.AppendLine("AccountAnonymousNeeded(false);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("// Ok I create a permanent account if temporary");
        //    tFile.AppendLine("AccountAnonymeGenerate();");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("if ($ban == true)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('ACC99',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("?>");
        //    string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
        //    sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_ACCOUNT_PHP, tFileFormatted);
        //    //NWEBenchmark.Finish();
        //}
        //-------------------------------------------------------------------------------------------------------------
        //private void CreatePHP_StaticErrorFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        //{
        //    //NWEBenchmark.Start();
        //    StringBuilder tFile = new StringBuilder(string.Empty);
        //    tFile.AppendLine("<?php");
        //    tFile.AppendLine(Headlines());
        //    tFile.AppendLine("// ERROR");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("// Declaration");
        //    tFile.AppendLine("errorDeclaration('UIG00', 'error in unique generate');");
        //    tFile.AppendLine("// sql error");
        //    tFile.AppendLine("errorDeclaration('SQL00', 'error SQL CONNEXION IMPOSSIBLE');");
        //    tFile.AppendLine("// header error");
        //    tFile.AppendLine("errorDeclaration('HEA01', 'os is empty');");
        //    tFile.AppendLine("errorDeclaration('HEA11', 'os is invalid');");
        //    tFile.AppendLine("errorDeclaration('HEA02', 'version is empty');");
        //    tFile.AppendLine("errorDeclaration('HEA12', 'version is invalid');");
        //    tFile.AppendLine("errorDeclaration('HEA03', 'lang is empty');");
        //    tFile.AppendLine("errorDeclaration('HEA13', 'lang is invalid');");
        //    tFile.AppendLine("errorDeclaration('HEA04', 'uuid is empty');");
        //    tFile.AppendLine("errorDeclaration('HEA14', 'uuid is invalid');");
        //    tFile.AppendLine("errorDeclaration('HEA05', 'hash is empty');");
        //    tFile.AppendLine("errorDeclaration('HEA15', 'hash is invalid');");
        //    tFile.AppendLine("errorDeclaration('HEA90', 'hash error');");
        //    tFile.AppendLine("errorDeclaration('SHS01', 'Secret Key error');");
        //    tFile.AppendLine("// param error");
        //    tFile.AppendLine("errorDeclaration('PAR97', 'not json valid');");
        //    tFile.AppendLine("errorDeclaration('PAR98', 'json digest is false');");
        //    tFile.AppendLine("errorDeclaration('PAR99', 'json null');");
        //    tFile.AppendLine("// version error");
        //    tFile.AppendLine("errorDeclaration('GVA00', 'error in sql select Version');");
        //    tFile.AppendLine("errorDeclaration('GVA99', 'block data');");
        //    tFile.AppendLine("errorDeclaration('GVA01', 'stop : update app');");
        //    tFile.AppendLine("errorDeclaration('GVA02', 'stop unknow version : update app');");
        //    tFile.AppendLine("// Account error");
        //    tFile.AppendLine("errorDeclaration('ACC01', 'action is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC02', 'action is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC03', 'appname is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC04', 'appname is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC05', 'appmail is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC06', 'appmail is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC10', 'email is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC40', 'email is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC11', 'password is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC41', 'password is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC12', 'confirm password is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC22', 'sign-up password is different to confirm password');");
        //    tFile.AppendLine("errorDeclaration('ACC42', 'confirm password is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC13', 'old password is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC43', 'old password is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC14', 'new password is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC24', 'sign-up new password is different to confirm password');");
        //    tFile.AppendLine("errorDeclaration('ACC44', 'new password is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC15', 'auuid is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC45', 'auuid is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC16', 'password is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC46', 'password is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC55', 'email or login unknow');");
        //    tFile.AppendLine("errorDeclaration('ACC56', 'multi-account');");
        //    tFile.AppendLine("errorDeclaration('ACC71', 'GoogleID is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC72', 'GoogleID is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC73', 'Google Graph error');");
        //    tFile.AppendLine("errorDeclaration('ACC74', 'Google SDK error');");
        //    tFile.AppendLine("errorDeclaration('ACC75', 'Google sql select error');");
        //    tFile.AppendLine("errorDeclaration('ACC76', 'Google sql update error');");
        //    tFile.AppendLine("errorDeclaration('ACC77', 'Google multi-account');");
        //    tFile.AppendLine("errorDeclaration('ACC78', 'Google singin error already log with this account');");
        //    tFile.AppendLine("errorDeclaration('ACC81', 'FacebookID is empty');");
        //    tFile.AppendLine("errorDeclaration('ACC82', 'FacebookID is invalid format');");
        //    tFile.AppendLine("errorDeclaration('ACC83', 'Facebook Graph error');");
        //    tFile.AppendLine("errorDeclaration('ACC84', 'Facebook SDK error');");
        //    tFile.AppendLine("errorDeclaration('ACC85', 'Facebook sql select error');");
        //    tFile.AppendLine("errorDeclaration('ACC86', 'Facebook sql update error');");
        //    tFile.AppendLine("errorDeclaration('ACC87', 'Facebook multi-account');");
        //    tFile.AppendLine("errorDeclaration('ACC88', 'Facebook singin error already log with this account');");
        //    tFile.AppendLine("errorDeclaration('ACC90', 'error in request select in Account');");
        //    tFile.AppendLine("errorDeclaration('ACC91', 'error in request insert anonymous Account');");
        //    tFile.AppendLine("errorDeclaration('ACC92', 'error in unknow account');");
        //    tFile.AppendLine("errorDeclaration('ACC95', 'user is multiple');");
        //    tFile.AppendLine("errorDeclaration('ACC99', 'user is banned');");
        //    tFile.AppendLine("errorDeclaration('ACC98', 'user is banned, no sign-in');");
        //    tFile.AppendLine("// Account sign error");
        //    tFile.AppendLine("errorDeclaration('SGN01', 'sign-up error in select valid account');");
        //    tFile.AppendLine("errorDeclaration('SGN02', 'sign-up error in select account by uuid');");
        //    tFile.AppendLine("errorDeclaration('SGN03', 'sign-up error in update account');");
        //    tFile.AppendLine("errorDeclaration('SGN04', 'sign-up error account already linked with another email');");
        //    tFile.AppendLine("errorDeclaration('SGN05', 'sign-up error multi-account by uuid');");
        //    tFile.AppendLine("errorDeclaration('SGN06', 'sign-up error account already linked with this email');");
        //    tFile.AppendLine("errorDeclaration('SGN07', 'sign-up error another account already linked with this email');");
        //    tFile.AppendLine("errorDeclaration('SGN08', 'sign-up error multi-account already linked with this email');");
        //    tFile.AppendLine("errorDeclaration('SGN09', 'modify error in select valid account');");
        //    tFile.AppendLine("errorDeclaration('SGN10', 'modify error unknow account');");
        //    tFile.AppendLine("errorDeclaration('SGN11', 'sign-up error in update account');");
        //    tFile.AppendLine("errorDeclaration('SGN12', 'modify error multi-account');");
        //    tFile.AppendLine("errorDeclaration('SGN13', 'modify error in select valid account');");
        //    tFile.AppendLine("errorDeclaration('SGN14', 'modify error email already use in another account');");
        //    tFile.AppendLine("errorDeclaration('SGN15', 'singin error in request account ');");
        //    tFile.AppendLine("errorDeclaration('SGN16', 'singin error no account ');");
        //    tFile.AppendLine("errorDeclaration('SGN17', 'singin error already log with this account');");
        //    tFile.AppendLine("errorDeclaration('SGN18', 'singin error multi-account ');");
        //    tFile.AppendLine("errorDeclaration('SGN19', 'delete error in update account');");
        //    //tFile.AppendLine("errorDeclaration('SGN25', 'signanonymous error in request account ');");
        //    //tFile.AppendLine("errorDeclaration('SGN26', 'signanonymous error no account ');");
        //    //tFile.AppendLine("errorDeclaration('SGN27', 'signanonymous error already log with this account');");
        //    //tFile.AppendLine("errorDeclaration('SGN28', 'signanonymous error multi-account ');");
        //    tFile.AppendLine("errorDeclaration('SGN33', 'signout impossible with anonymous account equal to restaured account');");
        //    tFile.AppendLine("errorDeclaration('SGN70', 'rescue select error');");
        //    tFile.AppendLine("errorDeclaration('SGN71', 'rescue unknow user');");
        //    tFile.AppendLine("errorDeclaration('SGN72', 'rescue multi-user');");
        //    tFile.AppendLine("errorDeclaration('SGN80', 'session select error');");
        //    tFile.AppendLine("errorDeclaration('SGN81', 'impossible unknow user');");
        //    tFile.AppendLine("errorDeclaration('SGN82', 'impossible multi-users');");
        //    tFile.AppendLine("// Token error");
        //    tFile.AppendLine("errorDeclaration('RQT01', 'error in request token creation');");
        //    tFile.AppendLine("errorDeclaration('RQT11', 'new token is not in base');");
        //    tFile.AppendLine("errorDeclaration('RQT12', 'error in token select');");
        //    tFile.AppendLine("errorDeclaration('RQT13', 'error in token delete');");
        //    tFile.AppendLine("errorDeclaration('RQT90', 'session not exists');");
        //    tFile.AppendLine("errorDeclaration('RQT91', 'session expired');");
        //    tFile.AppendLine("errorDeclaration('RQT92', 'token not in base');");
        //    tFile.AppendLine("errorDeclaration('RQT93', 'too much tokens in base ... reconnect you');");
        //    tFile.AppendLine("errorDeclaration('RQT94', 'too much tokens in base ... reconnect you');");
        //    tFile.AppendLine("errorDeclaration('SERVER', 'error internal');");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// errors declared list");
        //    //tFile.AppendLine("$ERR_LST;");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// Use to declare an error use after");
        //    //tFile.AppendLine("function errorDeclaration($sCode, $sDescription)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_LST;");
        //    //tFile.AppendLine("$ERR_LST[$sCode] = $sDescription;");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// Use to insert error pre-declare in JSON's respond");
        //    //tFile.AppendLine("function error($sCode, $sExit=true, $sfile='', $sfunction='', $sline='')");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_LST, $ERR_BOL, $ERR_COD, $ERR_DSC;");
        //    //tFile.AppendLine("$ERR_BOL = true;");
        //    //tFile.AppendLine("$ERR_COD = $sCode;");
        //    //tFile.AppendLine("$ERR_DSC = $ERR_LST[$sCode];");
        //    //tFile.AppendLine("myLogLineReturn();");
        //    //tFile.AppendLine("myLog('error with code '.$sCode, $sfile, $sfunction, $sline);");
        //    //tFile.AppendLine("myLogLineReturn();");
        //    //tFile.AppendLine("if ($sExit==true)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("include_once ('" + NWD.K_STATIC_FINISH_PHP + "');");
        //    //tFile.AppendLine("exit;");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("else{");
        //    //tFile.AppendLine("myLog('error without exit','','','');");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// Use to insert error in JSON's respond");
        //    //tFile.AppendLine("function errorInfos($sCode,$sInfos)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_INF;");
        //    //tFile.AppendLine("$ERR_INF = $sInfos;");
        //    //tFile.AppendLine("error($sCode);");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// return error in database");
        //    //tFile.AppendLine("function errorReference($sReference)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global "+NWD.K_SQL_CON+", "+NWD.K_ENV+";");
        //    //tFile.AppendLine("$tRow = '';");
        //    //tFile.AppendLine("$tQuery = 'SELECT * FROM `'."+NWD.K_ENV+".'_NWDError` WHERE `Reference` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sReference).'\\';';");
        //    //tFile.AppendLine("// echo($tQuery);");
        //    //tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    //tFile.AppendLine("if (!$tResult)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("error('ERRx33');");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("else");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("if ($tResult->num_rows >= 1)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("$tRow = $tResult->fetch_assoc();");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("mysqli_free_result($tResult);");
        //    //tFile.AppendLine("return $tRow;");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// return true if error in respond");
        //    //tFile.AppendLine("function errorDetected()");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_BOL;");
        //    //tFile.AppendLine("return $ERR_BOL;");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// use to cancel error in respond");
        //    //tFile.AppendLine("function errorCancel()");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_BOL, $ERR_COD, $ERR_DSC, $ERR_INF;");
        //    //tFile.AppendLine("$ERR_BOL = false;");
        //    //tFile.AppendLine("$ERR_COD = '';");
        //    //tFile.AppendLine("$ERR_DSC = '';");
        //    //tFile.AppendLine("$ERR_INF = '';");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// insert keys and value in JSON's respond");
        //    //tFile.AppendLine("function errorResult()");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_BOL, $ERR_COD, $ERR_DSC, $ERR_INF;");
        //    //tFile.AppendLine("if ($ERR_BOL == true)");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("respondAdd('error', $ERR_BOL);");
        //    //tFile.AppendLine("respondAdd('error_code',$ERR_COD);");
        //    //tFile.AppendLine("respondAdd('error_description',$ERR_DSC);");
        //    //tFile.AppendLine("if ($ERR_INF!='')");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("respondAdd('error_infos',$ERR_INF);");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    //tFile.AppendLine("// insert keys and value in JSON's respond");
        //    //tFile.AppendLine("function errorPossibilities()");
        //    //tFile.AppendLine("{");
        //    //tFile.AppendLine("global $ERR_LST;");
        //    //tFile.AppendLine("respondAdd(errorPossibilities,$ERR_LST);");
        //    //tFile.AppendLine("}");
        //    //tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("?>");
        //    string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
        //    sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_ERROR_PHP, tFileFormatted);
        //    //NWEBenchmark.Finish();
        //}
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticFinishFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {
            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// FINISH");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// prevent include from function for exit (typical example: error('XXX', true);)");
            tFile.AppendLine("global $NWD_SLT_TMP, " + NWD.K_SQL_CON + ", $NWD_TMA, $RRR_LOG, $REP, $WSBUILD, " + NWD.K_PHP_TIME_SYNC + ", $REF_NEEDED, $ACC_NEEDED, " + NWD.K_ENV + ", $NWD_SHA_VEC, $NWD_SHA_SEC, $NWD_SLT_STR, $NWD_SLT_END;");
            tFile.AppendLine(NWD.K_CommentSeparator);
            if (LogMode == true)
            {
                tFile.AppendLine("// add log");
                tFile.AppendLine(NWDError.FUNCTIONPHP_respond + "();");
                //tFile.AppendLine("respondAdd('log',$RRR_LOG);");
            }
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// web-services build");
            tFile.AppendLine("respondAdd('wsbuild',$WSBUILD);");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("//disconnect mysql");
            tFile.AppendLine("mysqli_close(" + NWD.K_SQL_CON + ");");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// Insert error if necessary");
            tFile.AppendLine("" + NWDError.FUNCTIONPHP_errorResult + "();");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// server benchmark");
            tFile.AppendLine("respondAdd('" + NWD.K_JSON_AVG_KEY + "', intval(sys_getloadavg()[0]*100));");
            tFile.AppendLine("respondAdd('" + NWD.K_JSON_PERFORM_KEY + "',microtime(true)-$NWD_TMA);");
            tFile.AppendLine("respondAdd('" + NWD.K_JSON_PERFORM_REQUEST_KEY + "',microtime(true)-$_SERVER['REQUEST_TIME_FLOAT']);");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("//transform respond in JSON file");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("$temporalSalt = saltTemporal($NWD_SLT_TMP, 0);");
            tFile.AppendLine("if (isset($REP['" + NWD.RequestTokenKey + "']))");
            tFile.AppendLine("{");
            tFile.AppendLine("header('" + NWD.HashKey + ": '.sha1($temporalSalt.$NWD_SHA_VEC.$REP['" + NWD.RequestTokenKey + "']));");
            tFile.AppendLine("header('" + NWD.RequestTokenKey + ": '.$REP['" + NWD.RequestTokenKey + "']);");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("$json = json_encode($REP);");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("if (respondIsset('" + NWD.K_JSON_SECURE_KEY + "'))");
            tFile.AppendLine("{");
            tFile.AppendLine("header('" + NWEUnityWebService.SecureKey + ": " + NWEUnityWebService.SecureDigestKey + "');");
            tFile.AppendLine("$REPSCR['" + NWEUnityWebService.SecureKey + "'] = aes128Encrypt( $json, $NWD_SHA_SEC, $NWD_SHA_VEC);");
            tFile.AppendLine("$REPSCR['" + NWEUnityWebService.SecureDigestKey + "'] = sha1($NWD_SLT_STR.$REPSCR['" + NWEUnityWebService.SecureKey + "'].$NWD_SLT_END);");
            tFile.AppendLine("$json = json_encode($REPSCR);");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// write JSON");
            tFile.AppendLine("echo($json);");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_FINISH_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticFunctionsFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {

            string tSignAccountKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().Account);
            string tSignHashKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().SignHash);
            string tRescueHashKey = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccountSign>().RescueHash);
            string tAC = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().AC);
            string tReference = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().Reference);
            string tBan = NWDToolbox.PropertyName(() => NWDBasisHelper.FictiveData<NWDAccount>().Ban);


            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// Functions");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("include_once ('" + NWD.K_STATIC_RESPOND_PHP + "');");
            tFile.AppendLine("include_once (" + NWDBasisHelper.BasisHelper<NWDError>().PHP_ENGINE_PATH(this) + ");");
            tFile.AppendLine("include_once ('" + NWD.K_STATIC_VALUES_PHP + "');");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("include_once (" + NWD.K_PATH_BASE + ".'/" + Environment + "/" + NWD.K_DB + "/NWDAccount/" + NWD.K_WS_SYNCHRONISATION + "');");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// admin ?");
            tFile.AppendLine("$admin = false;");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// ban account ?");
            tFile.AppendLine("$ban = false;");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function GetLocalizableString($sString, $sLang='BASE')");
            tFile.AppendLine("{");
            tFile.AppendLine("$tLines = explode('•', $sString);");
            tFile.AppendLine("foreach ($tLines as $tline)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tKeyValues = explode(':', $tline);");
            tFile.AppendLine("$tResult[$tKeyValues[0]] = $tKeyValues[1];");
            tFile.AppendLine("}");
            tFile.AppendLine("if (isset($tResult[$sLang]))");
            tFile.AppendLine("{");
            tFile.AppendLine("return UnprotectLocalizableString($tResult[$sLang]);");
            tFile.AppendLine("}");
            tFile.AppendLine("else if (isset($tResult['BASE']))");
            tFile.AppendLine("{");
            tFile.AppendLine("return UnprotectLocalizableString($tResult['BASE']);");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("return '';");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function UnprotectLocalizableString($sString)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tString =  str_replace('@1#','•',$sString);");
            tFile.AppendLine("$tString =  str_replace('@2#',':',$tString);");
            tFile.AppendLine("$tString =  str_replace('@3#','_',$tString);");
            tFile.AppendLine("return $tString;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);


            tFile.AppendLine("function SendEmail($sSubject, $sMessage, $sEmail, $sEmailFrom)");
            tFile.AppendLine("{");
            if (MailBySMTP == true)
            {
                tFile.AppendLine("global $SMTP_HOST, $SMTP_PORT, $SMTP_DOMAIN, $SMTP_FROM, $SMTP_REPLY, $SMTP_USER, $SMTP_PSW, $SMTP_AUT, $SMTP_STARTTLS, $SMTP_OPENSSL;");
                tFile.AppendLine("$headers['From'] = $sEmailFrom;");
                tFile.AppendLine("$headers['To'] = $sEmail;");
                tFile.AppendLine("$headers['Subject'] =$sSubject;");
                tFile.AppendLine("$params['sendmail_path'] = '/usr/lib/sendmail';");
                tFile.AppendLine("// Create the mail object using the Mail::factory method");
                tFile.AppendLine("$mail_object = Mail::factory('smtp', array ('host' => $SMTP_HOST, ");
                tFile.AppendLine("'auth' => true, ");
                tFile.AppendLine("'username' => $SMTP_USER, ");
                tFile.AppendLine("'password' => $SMTP_PSW));");
                tFile.AppendLine("$mail_object->send($sEmail, $headers, $sMessage);");
            }
            else
            {
                tFile.AppendLine("global $NWD_APP_NAM;");
		        tFile.AppendLine("$headers = 'Reply-to: '.$sEmailFrom.''.\"\\n\";");
		        tFile.AppendLine("$headers .= 'From: \"'.$NWD_APP_NAM.'\" <'.$sEmailFrom.'>'.\"\\n\";");
                tFile.AppendLine("$headers .= 'Return-path: '.$sEmailFrom.\"\\n\";");
                tFile.AppendLine("$headers .= 'X-Mailer: PHP '.phpversion().\"\\n\";");
                tFile.AppendLine("$headers .= 'X-Priority: 1 '.\"\\n\";");
                tFile.AppendLine("mail($sEmail,$sSubject, $sMessage,$headers);");
            }
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);


            //tFile.AppendLine("function versionTest($sVersion)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global "+NWD.K_ENV+";");
            //tFile.AppendLine("global "+NWD.K_SQL_CON+";");
            //tFile.AppendLine("global $admin;");
            //tFile.AppendLine("$return = true;");
            //tFile.AppendLine("$tTested = false;");
            //tFile.AppendLine("//mylog('test version ' . $sVersion, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("if ("+NWD.K_ENV+"=='Dev')");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$tQuery = 'SELECT * FROM `'."+NWD.K_ENV+".'_NWDVersion` WHERE `Version` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sVersion).'\\' AND `Buildable` = 1 AND `ActiveDev` = 1 AND `XX`= 0 AND `AC`= 1;';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else if ("+NWD.K_ENV+"=='Preprod')");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$tQuery = 'SELECT * FROM `'."+NWD.K_ENV+".'_NWDVersion` WHERE `Version` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sVersion).'\\' AND `Buildable` = 1 AND `ActivePreprod` = 1 AND `XX`= 0 AND `AC`= 1;';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else if ("+NWD.K_ENV+"=='Prod')");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$tQuery = 'SELECT * FROM `'."+NWD.K_ENV+".'_NWDVersion` WHERE `Version` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sVersion).'\\' AND `Buildable` = 1 AND `ActiveProd` = 1 AND `XX`= 0 AND `AC`= 1;';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
            //tFile.AppendLine("if (!$tResult)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuery.'', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('GVA00',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tResult->num_rows == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("//              mylog('OK ONE RESULT FOR VERSION REQUEST ' . $sVersion, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("while($tRow = $tResult->fetch_array())");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tRow['BlockDataUpdate'] == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("//                      mylog('BUT BLOCK UPDATE DATAS' . $sVersion, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('GVA99',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("$return = false;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("if ($tRow['BlockApplication'] == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("//                      mylog('BUT FORCE UPDATE APP' . $sVersion, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('GVA01',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("respondAdd('AlertTitle',$tRow['AlertTitle']);");
            //tFile.AppendLine("respondAdd('AlertMessage',$tRow['AlertMessage']);");
            //tFile.AppendLine("respondAdd('AlertValidation',$tRow['AlertValidation']);");
            //tFile.AppendLine("respondAdd('OSXStoreURL',$tRow['OSXStoreURL']);");
            //tFile.AppendLine("respondAdd('IOSStoreURL',$tRow['IOSStoreURL']);");
            //tFile.AppendLine("respondAdd('GooglePlayURL',$tRow['GooglePlayURL']);");
            //tFile.AppendLine("$return = false;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("//mylog('ERROR NO RESULT OR TOO MUCH RESULT FOR VERSION REQUEST ' . $sVersion, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("$return = false;");
            //tFile.AppendLine("error('GVA02',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("respondAdd('AlertTitle',$tRow['AlertTitle']);");
            //tFile.AppendLine("respondAdd('AlertMessage',$tRow['AlertMessage']);");
            //tFile.AppendLine("respondAdd('AlertValidation',$tRow['AlertValidation']);");
            //tFile.AppendLine("respondAdd('OSXStoreURL',$tRow['OSXStoreURL']);");
            //tFile.AppendLine("respondAdd('IOSStoreURL',$tRow['IOSStoreURL']);");
            //tFile.AppendLine("respondAdd('GooglePlayURL',$tRow['GooglePlayURL']);");
            //tFile.AppendLine("$return = false;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("return $return;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("// log function");
            //tFile.AppendLine("$RRR_LOG = '';");
            //tFile.AppendLine("$RRR_LOG_CNT = 0;");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("function myLogLineReturn()");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $RRR_LOG,$RRR_LOG_CNT;");
            //tFile.AppendLine("$RRR_LOG_CNT++;");
            //tFile.AppendLine("$RRR_LOG.='\\r'.$RRR_LOG_CNT;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("function myLog($sString, $sfile, $sfunction, $sline)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $RRR_LOG,$RRR_LOG_CNT;");
            //tFile.AppendLine("$RRR_LOG_CNT++;");
            //tFile.AppendLine("$sfile = basename($sfile);");
            //tFile.AppendLine("$t = round(strlen($sfile)/4);");
            //tFile.AppendLine("$r = 20-strlen($sfile);");
            //tFile.AppendLine("$RRR_LOG.='\\r'.$RRR_LOG_CNT.' - '.$sfile.' ';");
            //tFile.AppendLine("for ($i=$r;$i>0;$i--)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$RRR_LOG.=' ';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("if ($sfunction!='')");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$eeee = $sfunction.'() line '.$sline;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$eeee = 'line '.$sline;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("$r = 40-strlen($eeee);");
            //tFile.AppendLine("$RRR_LOG.=$eeee;");
            //tFile.AppendLine("for ($i=$r;$i>0;$i--)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$RRR_LOG.=' ';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("$RRR_LOG.=$sString;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function adminHashTest ($sAdminHash, $sAdminKey, $sFrequence)");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = false;");
            tFile.AppendLine("$temporalSalt = saltTemporal($sFrequence, 0);");
            tFile.AppendLine("$tHash = sha1($sAdminKey.$temporalSalt);");
            tFile.AppendLine("if ($sAdminHash == $tHash)");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("$temporalSaltMinor = saltTemporal($sFrequence, -1);");
            tFile.AppendLine("$tHashMinor = sha1($sAdminKey.$temporalSaltMinor);");
            tFile.AppendLine("if ($sAdminHash == $tHashMinor)");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("$temporalSaltMajor = saltTemporal($sFrequence, +1);");
            tFile.AppendLine("$tHashMajor = sha1($sAdminKey.$temporalSaltMajor);");
            tFile.AppendLine("if ($sAdminHash == $tHashMajor)");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $rReturn;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function referenceRandom ($sPrefix)");
            tFile.AppendLine("{");
            tFile.AppendLine("global " + NWD.K_PHP_TIME_SYNC + ";");
            tFile.AppendLine("$tTime = " + NWD.K_PHP_TIME_SYNC + "-1492711200; // Timestamp unix format");
            tFile.AppendLine("return $sPrefix.'-'.$tTime.'-'.rand ( 100000 , 999999 ).'C'; // C for Certify");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function referenceGenerate ($sPrefix, $sTable, $sColumn)");
            tFile.AppendLine("{");
            tFile.AppendLine("global " + NWD.K_SQL_CON + ";");
            tFile.AppendLine("$tReference = referenceRandom($sPrefix);");
            tFile.AppendLine("$tTested = false;");
            tFile.AppendLine("while ($tTested == false)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tQuery = 'SELECT `'.$sColumn.'` FROM `'.$sTable.'` WHERE `'.$sColumn.'` LIKE \\''." + NWD.K_SQL_CON + "->real_escape_string($tReference).'\\';';");
            tFile.AppendLine("$tResult = " + NWD.K_SQL_CON + "->query($tQuery);");
            tFile.AppendLine("if (!$tResult)");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_ErrorSQL(this, "$tQuery"));
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($tResult->num_rows == 0)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tTested = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$tReference = referenceRandom();");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("return $tReference;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("// temporary account ?");
            //tFile.AppendLine("// global $ACC_TMP, $ACC_NEED_USER_TRANSFERT;");
            //tFile.AppendLine("$ACC_TMP = false;");
            //tFile.AppendLine("$ACC_NEED_USER_TRANSFERT = false;");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("function AccountAnonymousNeeded($sUserTransfert=true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $ACC_TMP, $ACC_NEED_USER_TRANSFERT;");
            //tFile.AppendLine("$ACC_TMP = true;");
            //tFile.AppendLine("$ACC_NEED_USER_TRANSFERT = $sUserTransfert;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);
            //tFile.AppendLine("function AccountIsSigned()");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $ACC_TMP;");
            //tFile.AppendLine("$ACC_TMP = false;");
            //tFile.AppendLine("}");

            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("function AccountAnonymeGenerate($sExit=true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $ACC_TMP, "+NWD.K_PHP_TIME_SYNC+", $ACC_NEED_USER_TRANSFERT;");
            //tFile.AppendLine("global $shs, $ereg_token;");
            //tFile.AppendLine("global "+NWD.K_SQL_CON+";");
            //tFile.AppendLine("global $token, $uuid;");
            //tFile.AppendLine("global "+NWD.K_ENV+", $WSBUILD;");
            //tFile.AppendLine("global $SQL_NWDAccount_WebService;");
            //tFile.AppendLine("$rReturn = false;");
            //tFile.AppendLine("if ($ACC_TMP == true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if (paramValue ('shs', '"+NWD.K_WEB_SIGN_Key+"', '/^(.{24,64})$/', 'SHS01', 'SHS02'))");
            //tFile.AppendLine("{");
            ////tFile.AppendLine("myLog('shs = '.$tNewSecretKey, __FILE__, __FUNCTION__, __LINE__);");
            ////tFile.AppendLine("$tQuery = 'SELECT `Reference`, `Ban` FROM `'."+NWD.K_ENV+".'_NWDAccount` WHERE `SecretKey` = \\\'\'."+NWD.K_SQL_CON+"->real_escape_string($tNewSecretKey).\'\\\' AND `AC` = 1 AND `Email` = \\\'\\\' AND `FacebookID` = \\\'\\\' AND `GoogleID` = \\\'\\\';';");
            ////tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
            ////tFile.AppendLine("if (!$tResult)");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuery.'', __FILE__, __FUNCTION__, __LINE__);");
            ////tFile.AppendLine("error('SGN15');");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("else");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("if ($tResult->num_rows == 0)");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("$ACC_TMP = true;");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("else if ($tResult->num_rows == 1)");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("$ACC_TMP = false;");
            ////tFile.AppendLine("while ($tRow = $tResult->fetch_array())");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("if ($tRow['Ban'] > 0)");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("$ban = true;");
            ////tFile.AppendLine("error('ACC98');");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("else");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("if ($uuid != $tRow['Reference'])");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("respondNeedReloadData();");
            ////tFile.AppendLine("respondUUID($tRow['Reference']);");
            ////tFile.AppendLine("respondAdd('sign', 'anonymous');");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("else");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("error('SGN17', true, __FILE__, __FUNCTION__, __LINE__);");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("$uuid = $tRow['Reference'];");
            ////tFile.AppendLine("$token = NWDRequestTokenReset($uuid); // reset connexion to zero");
            ////tFile.AppendLine(" }");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine(" }");
            ////tFile.AppendLine("else //or more than one user with this email … strange… I push an error, user must be unique");
            ////tFile.AppendLine("{");
            ////tFile.AppendLine("// to much users ...");
            ////tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuery.'', __FILE__, __FUNCTION__, __LINE__);");
            ////tFile.AppendLine("error('SGN18');");
            ////tFile.AppendLine("}");
            ////tFile.AppendLine("mysqli_free_result($tResult);");
            ////tFile.AppendLine("}");
            //tFile.AppendLine("myLog('shs : '.$shs.'', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("$tQuerySign = 'SELECT `"+tSignAccountKey+"` FROM `'."+NWD.K_ENV+".'_"+NWDBasisHelper.BasisHelper<NWDAccountSign>().ClassNamePHP+"` WHERE `"+tSignHashKey+"` = \\''."+NWD.K_SQL_CON+"->real_escape_string($shs).'\\' AND `"+tSignHashKey+"` != \\'\\' AND `"+tAC+"` = 1;';");
            //tFile.AppendLine("$tResultSign = "+NWD.K_SQL_CON+"->query($tQuerySign);");
            //tFile.AppendLine("if (!$tResultSign)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuerySign.'', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('SGN15', true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tResultSign->num_rows == 0)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$ACC_TMP = true;");
            //tFile.AppendLine("// error('SGN16',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("myLog('shs : '.$shs.' NO Row', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine(" else if ($tResultSign->num_rows == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$ACC_TMP = false;");
            //tFile.AppendLine(" // ok I have one user");
            //tFile.AppendLine("while ($tRowSign = $tResultSign->fetch_array())");
            //tFile.AppendLine("{");
            //tFile.AppendLine("myLog('shs : '.$shs.' find One Row', __FILE__, __FUNCTION__, __LINE__); ");
            //tFile.AppendLine("// I get the password uuid hash");
            //tFile.AppendLine("$tQuery = 'SELECT `"+tReference+"`, `"+tBan+"` FROM `'."+NWD.K_ENV+".'_"+NWDBasisHelper.BasisHelper<NWDAccount>().ClassNamePHP+"` WHERE `"+tReference+"` = \\''."+NWD.K_SQL_CON+"->real_escape_string($tRowSign['"+tSignAccountKey+"']).'\\' AND `"+tAC+"` = 1;';");
            //tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
            //tFile.AppendLine("if (!$tResult)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tQuery.'', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('SGN15',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tResult->num_rows == 0)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// unknow user");
            //tFile.AppendLine("error('SGN16',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else if ($tResult->num_rows == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// ok I have one user");
            //tFile.AppendLine("while ($tRow = $tResult->fetch_array())");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tRow['"+tBan+"'] > 0)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$ban = true;");
            //tFile.AppendLine("error('ACC98',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("AccountIsSigned();");
            //tFile.AppendLine("if ($uuid != $tRow['"+tReference+"'])");
            //tFile.AppendLine("{");
            //tFile.AppendLine("respondNeedReloadData();");
            //tFile.AppendLine("respondUUID($tRow['"+tReference+"']);");
            //tFile.AppendLine("respondAdd('"+NWDOperationWebAccountAction.signin.ToString()+"', true);");
            ////tFile.AppendLine("respondAdd('sign', 'loginpassword');");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("error('SGN17',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("$uuid = $tRow['"+tReference+"'];");
            //tFile.AppendLine("$token = NWDRequestTokenReset($uuid); // reset connexion to zero");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else //or more than one user with this sign … strange… I push an error, user must be unique for unique sign");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// to much users ...");
            //tFile.AppendLine("error('SGN18');");
            //tFile.AppendLine("}");
            //tFile.AppendLine("mysqli_free_result($tResult);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else //or more than one user with this email … strange… I push an error, user must be unique");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// to much users ...");
            //tFile.AppendLine("error('SGN18', true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("myLog('shs : '.$shs.' Too Mush Row', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("mysqli_free_result($tResultSign);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("if ($ACC_TMP == true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$tInternalKey = '';");
            //tFile.AppendLine("$tInternalDescription = '';");
            //tFile.AppendLine("$tNewUUID = referenceGenerate ('ACC', "+NWD.K_ENV+".'_NWDAccount', 'Reference');");
            ////tFile.AppendLine("$tNewSecretKey = referenceGenerate ('SHS', "+NWD.K_ENV+".'_NWDAccount', 'SecretKey');");
            //tFile.AppendLine("$tInsertSQL='';");
            //tFile.AppendLine("$tInsertSQLValue='';");
            //tFile.AppendLine("//`Reference`, `DM`, `DS`, `DevSync`, `PreprodSync`, `ProdSync`, `AC`, `AppleNotificationToken`, `Ban`, `DC`, `DD`,");
            //tFile.AppendLine("// `Email`, `FacebookID`, `GoogleID`, `GoogleNotificationToken`, `InError`, ");
            //tFile.AppendLine("//`InternalDescription`, `InternalKey`, `MinVersion`, `Password`, `Preview`, `SecretKey`, `Tag`, `UseInEnvironment`, `WebModel`, `XX`");
            //tFile.AppendLine("$tInsertSQL.='INSERT INTO `'."+NWD.K_ENV+".'_NWDAccount` (';");
            //tFile.AppendLine("$tInsertSQL.='`Reference`, '; $tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string($tNewUUID).'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`ServerHash`, ';$tInsertSQLValue.= '\\'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`ServerLog`, ';$tInsertSQLValue.= '\\'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DM`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DS`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("if ("+NWD.K_ENV+" == 'Dev')");
            //tFile.AppendLine("{");
            ////tFile.AppendLine("$tInsertSQL.='`InternalKey`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string(md5($_SERVER['REMOTE_ADDR']).'-'.$WSBUILD.'-'."+NWD.K_PHP_TIME_SYNC+").'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`InternalKey`, ';$tInsertSQLValue.= '\\'Anonymous Certified\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`InternalDescription`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string('Dev account').'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DevSync`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`PreprodSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`ProdSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("if ("+NWD.K_ENV+" == 'Preprod')");
            //tFile.AppendLine("{");
            ////tFile.AppendLine("$tInsertSQL.='`InternalKey`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string(md5($_SERVER['REMOTE_ADDR']).'-'.$WSBUILD.'-'."+NWD.K_PHP_TIME_SYNC+").'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`InternalKey`, ';$tInsertSQLValue.= '\\'Anonymous Certified\\', ';");          
            //tFile.AppendLine("$tInsertSQL.='`InternalDescription`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string('Preprod account').'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DevSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`PreprodSync`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`ProdSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("if ("+NWD.K_ENV+" == 'Prod')");
            //tFile.AppendLine("{");
            ////tFile.AppendLine("$tInsertSQL.='`InternalKey`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string(md5($_SERVER['REMOTE_ADDR']).'-'.$WSBUILD.'-'."+NWD.K_PHP_TIME_SYNC+").'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`InternalDescription`, ';$tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string('Prod account').'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DevSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`PreprodSync`, ';$tInsertSQLValue.= '\\'-1\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`ProdSync`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("}");
            //tFile.AppendLine("$tInsertSQL.='`AC`, ';$tInsertSQLValue.= '\\'1\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`AppleNotificationToken`, ';$tInsertSQLValue.= '\\'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`Ban`, ';$tInsertSQLValue.= '\\'0\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DC`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`DD`, ';$tInsertSQLValue.= '\\''."+NWD.K_PHP_TIME_SYNC+".'\\', '; ");
            ////tFile.AppendLine("$tInsertSQL.='`Email`, ';$tInsertSQLValue.= '\\'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`FacebookID`, ';$tInsertSQLValue.= '\\'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`GoogleID`, ';$tInsertSQLValue.= '\\'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`GoogleNotificationToken`, ';$tInsertSQLValue.= '\\'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`InError`, ';$tInsertSQLValue.= '\\'0\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`CheckList`, ';$tInsertSQLValue.= '\\'0\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`MinVersion`, ';$tInsertSQLValue.= '\\'0.00.00\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`Password`, ';$tInsertSQLValue.= '\\'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`Preview`, ';$tInsertSQLValue.= '\\'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`SecretKey`, '; $tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string($tNewSecretKey).'\\', ';");
            ////tFile.AppendLine("$tInsertSQL.='`SecretKey`, '; $tInsertSQLValue.= '\\''."+NWD.K_SQL_CON+"->real_escape_string($shs).'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`Tag`, ';$tInsertSQLValue.= '\\'19\\', '; // server created");
            //tFile.AppendLine("$tInsertSQL.='`UseInEnvironment`, ';$tInsertSQLValue.= '\\'0\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`WebModel`, ';$tInsertSQLValue.= '\\''.$SQL_NWDAccount_WebService.'\\', ';");
            //tFile.AppendLine("$tInsertSQL.='`XX` ';$tInsertSQLValue.= '\\'0\\'';");
            //tFile.AppendLine("$tInsertSQL.=')';");
            //tFile.AppendLine("$tInsertSQL.=' VALUES ('.$tInsertSQLValue.');';");
            //tFile.AppendLine("$tInsert = "+NWD.K_SQL_CON+"->query($tInsertSQL);");
            //tFile.AppendLine("if (!$tInsert)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("respondAdd('sql', $tInsertSQL);");
            ////tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.'  in : '.$tInsertSQL.'', __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('ACC91',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$uuid = $tNewUUID;");
            //tFile.AppendLine("IntegrityNWDAccountReevalue ($uuid);");
            //tFile.AppendLine("respondUUID($uuid);");
            //tFile.AppendLine("respondAdd('newuser', true);");
            //tFile.AppendLine("respondAdd('usertransfert', $ACC_NEED_USER_TRANSFERT);");
            ////tFile.AppendLine("respondAdd('sign', 'anonymous');");
            ////tFile.AppendLine("respondAdd('signkey', $tNewSecretKey);");
            //tFile.AppendLine("respondAdd('reloaddatas', true);");
            //tFile.AppendLine("NWDRequestTokenIsValid($uuid,'');");
            //tFile.AppendLine("$rReturn = true;");
            //tFile.AppendLine("$ACC_TMP = false;");
            //tFile.AppendLine("if ($sExit==true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("include_once ('" + NWD.K_STATIC_FINISH_PHP + "');");
            //tFile.AppendLine("exit;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("myLog('Error shs = '.$shs, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("error('SHS01', true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("return $rReturn;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);







            tFile.AppendLine("function CodeRandomSizable (int $sSize)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tMin = 1;");
            tFile.AppendLine("while ($sSize>1)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tMin = $tMin*10;");
            tFile.AppendLine("$sSize--;");
            tFile.AppendLine("}");
            tFile.AppendLine("$tMax = ($tMin*10)-1;");
            tFile.AppendLine("return rand ($tMin ,$tMax );");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function RandomString($sLength = 10) {");
            tFile.AppendLine("$tCharacters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';");
            tFile.AppendLine("$tCharactersLength = strlen($tCharacters);");
            tFile.AppendLine("$tRandomString = '';");
            tFile.AppendLine("for ($i = 0; $i < $sLength; $i++) {");
            tFile.AppendLine("$tRandomString .= $tCharacters[rand(0, $tCharactersLength - 1)];");
            tFile.AppendLine("}");
            tFile.AppendLine("return $tRandomString;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function UniquePropertyValueFromValue($sTable, $sColumnOrign, $sColumUniqueResult, $sReference, $sNeverEmpty = true)");
            tFile.AppendLine("{");
            tFile.AppendLine("global " + NWD.K_SQL_CON + ", " + NWD.K_PHP_TIME_SYNC + ";");
            tFile.AppendLine("$rModified = false;");
            tFile.AppendLine("$tQuery = 'SELECT `'.$sColumnOrign.'`, `'.$sColumUniqueResult.'`, `Reference` FROM `'.$sTable.'` WHERE `Reference` = \\''." + NWD.K_SQL_CON + "->real_escape_string($sReference).'\\'';");
            tFile.AppendLine("$tResult = " + NWD.K_SQL_CON + "->query($tQuery);");
            tFile.AppendLine("if (!$tResult)");
            tFile.AppendLine("{");
            //tFile.AppendLine("errorDeclaration('UPVFV00', 'error in select other UniqueNickname already install');");
            //tFile.AppendLine("error('UPVFV00',true, __FILE__, __FUNCTION__, __LINE__);");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($tResult->num_rows == 1)");
            tFile.AppendLine("{");
            tFile.AppendLine("while($tRow = $tResult->fetch_array())");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($tRow[$sColumnOrign] == '' && $sNeverEmpty == true)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tRow[$sColumnOrign] = RandomString(10);");
            tFile.AppendLine("}");
            tFile.AppendLine("$tOrigin = str_replace('#','',$tRow[$sColumnOrign]);");
            tFile.AppendLine("$tOrigin = str_replace(' ','-',$tOrigin);");
            tFile.AppendLine("$tNick = $tOrigin.'#???';");
            tFile.AppendLine("$tNickArray = explode('#',$tRow[$sColumUniqueResult]);");
            tFile.AppendLine("if (count($tNickArray)==2)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tCodeAc = $tNickArray[1];");
            tFile.AppendLine("if (preg_match ('/^([0-9]{1,12})$/', $tCodeAc))");
            tFile.AppendLine("{");
            tFile.AppendLine("$tNick = $tNickArray[0];");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("// error ");
            tFile.AppendLine("}");
            tFile.AppendLine("$tTested = false;");
            tFile.AppendLine("$tSize = 3;");
            tFile.AppendLine("if ($tOrigin == $tNick)");
            tFile.AppendLine("{");
            tFile.AppendLine("// Nothing to do ? perhaps ... I test");
            tFile.AppendLine("$tQueryTest = 'SELECT `'.$sColumUniqueResult.'` FROM `'.$sTable.'` WHERE `'.$sColumUniqueResult.'` LIKE \\''." + NWD.K_SQL_CON + "->real_escape_string($tRow[$sColumUniqueResult]).'\\'';");
            tFile.AppendLine("$tResultTest = " + NWD.K_SQL_CON + "->query($tQueryTest);");
            tFile.AppendLine("if (!$tResultTest)");
            tFile.AppendLine("{");
            //tFile.AppendLine("errorDeclaration('UPVFV01', 'error in select other UniqueNickname already install');");
            //tFile.AppendLine("error('UPVFV01',true, __FILE__, __FUNCTION__, __LINE__);");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($tResultTest->num_rows == 1)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tTested = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("if ($tTested == false)");
            tFile.AppendLine("{");
            tFile.AppendLine("// I need change for an unique nickname");
            tFile.AppendLine("while ($tTested == false)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tPinCode = CodeRandomSizable($tSize++);");
            tFile.AppendLine("$tQueryTestUnique = 'SELECT `'.$sColumUniqueResult.'` FROM `'.$sTable.'` WHERE `'.$sColumUniqueResult.'` LIKE \\''." + NWD.K_SQL_CON + "->real_escape_string($tOrigin).'#'.$tPinCode.'\\'';");
            tFile.AppendLine("$tResultTestUnique = " + NWD.K_SQL_CON + "->query($tQueryTestUnique);");
            tFile.AppendLine("if (!$tResultTestUnique)");
            tFile.AppendLine("{");
            //tFile.AppendLine("errorDeclaration('UPVFV02', 'error in select other UniqueNickname already install');");
            //tFile.AppendLine("error('UPVFV02',true, __FILE__, __FUNCTION__, __LINE__);");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($tResultTestUnique->num_rows == 0)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tTested = true;");
            tFile.AppendLine("$rModified = true;");
            tFile.AppendLine("// Ok I have a good PinCode I update");
            tFile.AppendLine("$tQueryUpdate = 'UPDATE `'.$sTable.'` SET `DM` = \\''." + NWD.K_PHP_TIME_SYNC + ".'\\', `'.$sColumnOrign.'` = \\''." + NWD.K_SQL_CON + "->real_escape_string($tOrigin).'\\', `'.$sColumUniqueResult.'` = \\''." + NWD.K_SQL_CON + "->real_escape_string($tOrigin).'#'.$tPinCode.'\\' WHERE `Reference` = \\''." + NWD.K_SQL_CON + "->real_escape_string($sReference).'\\'';");
            tFile.AppendLine("$tResultUpdate = " + NWD.K_SQL_CON + "->query($tQueryUpdate);");
            tFile.AppendLine("if (!$tResultUpdate)");
            tFile.AppendLine("{");
            //tFile.AppendLine("errorDeclaration('UPVFV03', 'error in updtae reference object pincode');");
            //tFile.AppendLine("error('UPVFV03',true, __FILE__, __FUNCTION__, __LINE__);");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("//pincode is update");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            //tFile.AppendLine("errorDeclaration('UPVFV04', 'error in select multiple reference or no reference (!=1)');");
            //tFile.AppendLine("error('UPVFV04',true, __FILE__, __FUNCTION__, __LINE__);");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("return $rModified;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_FUNCTIONS_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticRequestFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {
            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// REQUEST");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("include_once ($PATH_BASE.'/" + Environment + "/" + NWD.K_DB + "/" + NWDBasisHelper.BasisHelper<NWDAccount>().ClassNamePHP + "/" + NWD.K_WS_ENGINE + "');");
            tFile.AppendLine("include_once ($PATH_BASE.'/" + Environment + "/" + NWD.K_DB + "/" + NWDBasisHelper.BasisHelper<NWDIPBan>().ClassNamePHP + "/" + NWD.K_WS_ENGINE + "');");
            tFile.AppendLine("include_once ($PATH_BASE.'/" + Environment + "/" + NWD.K_DB + "/" + NWDBasisHelper.BasisHelper<NWDRequestToken>().ClassNamePHP + "/" + NWD.K_WS_ENGINE + "');");
            tFile.AppendLine("include_once ($PATH_BASE.'/" + Environment + "/" + NWD.K_DB + "/" + NWDBasisHelper.BasisHelper<NWDVersion>().ClassNamePHP + "/" + NWD.K_WS_ENGINE + "');");
            tFile.AppendLine("if (IPBanOk() == true)");
            tFile.AppendLine("{");
            tFile.AppendLine("$ereg_os = '/^(editor|unity|ios|osx|android|web|win|wp8|ps3|ps4|psp|switch)$/';");
            tFile.AppendLine("$ereg_version = '/^([0-9]{1,2})+(\\.[0-9]{1,3})*$/';");
            tFile.AppendLine("$ereg_lang = '/^([A-Z\\_\\-a-z]{2,7})$/';");
            tFile.AppendLine("$ereg_UUID = '/^([A-Za-z0-9\\-]{15,48})$/';");
            //tFile.AppendLine("$ereg_hash = '/^([A-Za-z0-9\\-]{3,48})$/';");
            tFile.AppendLine("$ereg_hash = '/^(.*)$/';");
            tFile.AppendLine("$ereg_token = '/^(.*)$/';");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("if (headerValue ('os', '" + NWD.K_WEB_HEADER_OS_KEY + "', $ereg_os, '" + NWDError.NWDError_HEA01.Code + "', '" + NWDError.NWDError_HEA11.Code + "')) // test if os infos is valid");
            tFile.AppendLine("{");
            tFile.AppendLine("if (headerValue ('version', '" + NWD.K_WEB_HEADER_VERSION_KEY + "', $ereg_version, '" + NWDError.NWDError_HEA02.Code + "', '" + NWDError.NWDError_HEA12.Code + "')) // test if version is ok");
            tFile.AppendLine("{");
            tFile.AppendLine("// I must prevent admin mode in table creation");
            tFile.AppendLine("global $admin;");
            tFile.AppendLine("headerBrutalValue ('adminHash', '" + NWD.AdminHashKey + "');");
            tFile.AppendLine("$admin = adminHashTest ($adminHash, $NWD_ADM_KEY, $NWD_SLT_TMP);");
            tFile.AppendLine("if ($admin==true)");
            tFile.AppendLine("{");
            tFile.AppendLine("$versionValid = true;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$versionValid = versionTest($version);");
            tFile.AppendLine("}");
            tFile.AppendLine("if ($versionValid == true)");
            tFile.AppendLine("{");
            tFile.AppendLine("if (headerValue ('lang', '" + NWD.K_WEB_HEADER_LANG_KEY + "', $ereg_lang, '" + NWDError.NWDError_HEA03.Code + "', '" + NWDError.NWDError_HEA13.Code + "')) // test if lang is ok");
            tFile.AppendLine("{");
            tFile.AppendLine("if (headerValue ('uuid', '" + NWD.UUIDKey + "', $ereg_UUID, '" + NWDError.NWDError_HEA04.Code + "', '" + NWDError.NWDError_HEA14.Code + "')) // test UUID of headers");
            tFile.AppendLine("{");
            tFile.AppendLine("if (headerValue ('hash', '" + NWD.HashKey + "', $ereg_hash, '" + NWDError.NWDError_HEA05.Code + "', '" + NWDError.NWDError_HEA15.Code + "')) // test hash of headers");
            tFile.AppendLine("{");
            tFile.AppendLine("headerBrutalValue ('token', '" + NWD.RequestTokenKey + "');");
            tFile.AppendLine("$temporalSalt = saltTemporal($NWD_SLT_TMP, 0);");
            tFile.AppendLine("$tHash = sha1($os.$version.$lang.$temporalSalt.$uuid.$token);");
            tFile.AppendLine("$temporalSaltMinor = saltTemporal($NWD_SLT_TMP, -1);");
            tFile.AppendLine("$tHashMinor = sha1($os.$version.$lang.$temporalSaltMinor.$uuid.$token);");
            tFile.AppendLine("$temporalSaltMajor = saltTemporal($NWD_SLT_TMP, +1);");
            tFile.AppendLine("$tHashMajor = sha1($os.$version.$lang.$temporalSaltMajor.$uuid.$token);");
            tFile.AppendLine("$Verif = false;");
            tFile.AppendLine("if ($tHashMinor == $hash || $tHash ==$hash || $tHashMajor == $hash)");
            tFile.AppendLine("{");
            tFile.AppendLine("getParams('" + NWEUnityWebService.UnSecureKey + "', '" + NWEUnityWebService.UnSecureDigestKey + "', true, false);");
            tFile.AppendLine("if(getParams('" + NWEUnityWebService.SecureKey + "', '" + NWEUnityWebService.SecureDigestKey + "', false, true)==true)");
            tFile.AppendLine("{");
            tFile.AppendLine("respondAdd('" + NWD.K_JSON_SECURE_KEY + "',true);");
            tFile.AppendLine("}");
            //tFile.AppendLine("if ($SQL_MNG == false)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$tQuery = 'SELECT `Reference`,`Ban` FROM `'."+NWD.K_ENV+".'_NWDAccount` WHERE `Reference` = \\''."+NWD.K_SQL_CON+"->real_escape_string($uuid).'\\' AND `AC` = 1;';");
            //tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
            //tFile.AppendLine("if (!$tResult)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("error('ACC90',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tResult->num_rows == 0)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// if user is temporary user I must find the last letter equal to 'T'");
            //tFile.AppendLine("if (substr($uuid, -1) == 'T')");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// I put order to create anonymous account if account is not resolve before action (sync, etc)");
            //tFile.AppendLine("AccountAnonymousNeeded(true);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("// strange… an unknow account but not temporary … it's not possible");
            //tFile.AppendLine("error('ACC92',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else if ($tResult->num_rows == 1)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("while($tRow = $tResult->fetch_array())");
            //tFile.AppendLine("{");
            //tFile.AppendLine("if ($tRow['Ban'] > 0)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("$ban = true;");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("}");
            //tFile.AppendLine("else //or more than one user with this UUID … strange… I push an error, user must be unique");
            //tFile.AppendLine("{");
            //tFile.AppendLine("error('ACC95',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("mysqli_free_result($tResult);");
            //tFile.AppendLine("}");
            //tFile.AppendLine("// I test the request token");
            //tFile.AppendLine("NWDRequestTokenIsValid($uuid,$token);");
            //tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_HEA90));
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            //tFile.AppendLine("else");
            //tFile.AppendLine("{");
            //tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);
            //tFile.AppendLine("// Ok I create a permanent account if temporary before");
            //tFile.AppendLine("AccountAnonymeGenerate();");
            //tFile.AppendLine(NWD.K_CommentSeparator);
            //tFile.AppendLine("if ($ban == true)");
            //tFile.AppendLine("{");
            //tFile.AppendLine("error('ACC99',true, __FILE__, __FUNCTION__, __LINE__);");
            //tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_REQUEST_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        //private void CreatePHP_StaticRequestTokenFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        //{
        //    //NWEBenchmark.Start();
        //    StringBuilder tFile = new StringBuilder(string.Empty);
        //    tFile.AppendLine("<?php");
        //    tFile.AppendLine(Headlines());
        //    tFile.AppendLine("// REQUEST TOKEN");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenCreate($sUUIDHash)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global "+NWD.K_SQL_CON+", "+NWD.K_ENV+", "+NWD.K_PHP_TIME_SYNC+";");
        //    tFile.AppendLine("$tToken = NWDRequestTokenGenerateToken($sUUIDHash);");
        //    tFile.AppendLine("$tInsert = "+NWD.K_SQL_CON+"->query('INSERT INTO `'."+NWD.K_ENV+".'_NWDRequestToken` (`DC`, `DM`, `DD`, `AC`, `Token`, `UUIDHash`, `Integrity`) VALUES ( \\''."+NWD.K_PHP_TIME_SYNC+".'\\', \\''."+NWD.K_PHP_TIME_SYNC+".'\\', \\'0\\', \\'1\\', \\''."+NWD.K_SQL_CON+"->real_escape_string($tToken).'\\', \\''."+NWD.K_SQL_CON+"->real_escape_string($sUUIDHash).'\\', \\'???????\\' );');");
        //    tFile.AppendLine("if (!$tInsert)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('RQT01',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("myLog('error in mysqli request : ('. "+NWD.K_SQL_CON+"->errno.')'. "+NWD.K_SQL_CON+"->error.' in : '.$tInsert.'', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("return $tToken;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenDeleteOldToken ($sUUIDHash, $sTimestamp, $sToken)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global "+NWD.K_SQL_CON+", "+NWD.K_ENV+";");
        //    tFile.AppendLine("myLog('delete old token', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("$tQuery = 'DELETE FROM `'."+NWD.K_ENV+".'_NWDRequestToken` WHERE `UUIDHash` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sUUIDHash).'\\' AND `DM` <= \\''."+NWD.K_SQL_CON+"->real_escape_string($sTimestamp).'\\' AND `Token` != \\''."+NWD.K_SQL_CON+"->real_escape_string($sToken).'\\';';");
        //    tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    tFile.AppendLine("if (!$tResult)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('RQT14',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("myLog('ERROR IN '.$tQuery);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenGenerateToken ($sUUIDHash)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global "+NWD.K_PHP_TIME_SYNC+";");
        //    tFile.AppendLine("$tRandom = $sUUIDHash.'-'."+NWD.K_PHP_TIME_SYNC+".'-'.rand ( 1000000000 , 9999999999 ).'-0';");
        //    tFile.AppendLine("return md5($tRandom);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenDeleteAllToken ($sUUIDHash)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global "+NWD.K_SQL_CON+", "+NWD.K_ENV+";");
        //    tFile.AppendLine("$tQuery = 'DELETE FROM `'."+NWD.K_ENV+".'_NWDRequestToken` WHERE `UUIDHash` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sUUIDHash).'\\';';");
        //    tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    tFile.AppendLine("if (!$tResult)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('RQT13',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("myLog('ERROR IN '.$tQuery);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenReset ($sUUIDHash)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global $REP;");
        //    tFile.AppendLine("global $token;");
        //    tFile.AppendLine("NWDRequestTokenDeleteAllToken ($sUUIDHash);");
        //    tFile.AppendLine("$token = NWDRequestTokenCreate ($sUUIDHash);");
        //    tFile.AppendLine("$REP['"+NWD.RequestTokenKey+"']=$token;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("function NWDRequestTokenIsValid ($sUUIDHash, $sToken)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("global "+NWD.K_SQL_CON+", "+NWD.K_ENV+", "+NWD.K_PHP_TIME_SYNC+";");
        //    tFile.AppendLine("global $REP;");
        //    tFile.AppendLine("global $token;");
        //    tFile.AppendLine("global $token_FirstUse;");
        //    tFile.AppendLine("global $RTH;");
        //    tFile.AppendLine("$rReturn = false;");
        //    tFile.AppendLine("if ($sToken=='')");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$rReturn = true;");
        //    tFile.AppendLine("$token = NWDRequestTokenCreate($sUUIDHash);");
        //    tFile.AppendLine("$REP['"+NWD.RequestTokenKey+"'] = $token;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$tQuery = 'SELECT `Token`,`DM`, `AC` FROM `'."+NWD.K_ENV+".'_NWDRequestToken` WHERE `UUIDHash` = \\''."+NWD.K_SQL_CON+"->real_escape_string($sUUIDHash).'\\' AND `DD` = \\'0\\';';");
        //    tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    tFile.AppendLine("if (!$tResult)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('RQT12',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tResult->num_rows == 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// not possible ... the token is too old and the base was purged since the last connexion");
        //    tFile.AppendLine("$rReturn = false;");
        //    tFile.AppendLine("error('RQT90',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else if ($tResult->num_rows <= $RTH)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// ok I have some token for this user ...");
        //    tFile.AppendLine("$tTokenIsValid = false;");
        //    tFile.AppendLine("$tTimestamp = 0;");
        //    tFile.AppendLine("$tToken = '';");
        //    tFile.AppendLine("while($tRow = $tResult->fetch_array())");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('find token : '.$tRow['Token'], __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("if ($tRow['Token'] == $sToken)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tRow['AC'] == 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('find OLD token reused: '.$tRow['Token'], __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("$token_FirstUse = false;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$token_FirstUse = true;");
        //    tFile.AppendLine("$tQueryUseToken = 'UPDATE `'."+NWD.K_ENV+".'_NWDRequestToken` SET `AC` = \\'0\\' WHERE `Token` = \\''."+NWD.K_SQL_CON+"->real_escape_string($tRow['Token']).'\\';';");
        //    tFile.AppendLine("$tResultUseToken = "+NWD.K_SQL_CON+"->query($tQueryUseToken);");
        //    tFile.AppendLine("if (!$tResultUseToken)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("error('RQT11',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("myLog('find token, Use IT: '.$tRow['Token'], __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("$tTokenIsValid = true;");
        //    tFile.AppendLine("$tTimestamp = $tRow['DM'];");
        //    tFile.AppendLine("$tToken = $tRow['Token'];");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// Not the good token ... newest or oldest ... don't use it to analyze");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("if ($tTokenIsValid==true)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$rReturn = true;");
        //    tFile.AppendLine("NWDRequestTokenDeleteOldToken ($sUUIDHash, $tTimestamp, $tToken);");
        //    tFile.AppendLine("$token = NWDRequestTokenCreate($sUUIDHash);");
        //    tFile.AppendLine("$REP['"+NWD.RequestTokenKey+"'] = $token;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$rReturn = false;");
        //    tFile.AppendLine("error('RQT91',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// not possible ... the token are too number");
        //    tFile.AppendLine("myLog('not possible ... the token are too number', __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("error('RQT93',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("//                  $TokenDate = '';");
        //    tFile.AppendLine("//                  $LastTokenDate = '';");
        //    tFile.AppendLine("//                  $TokenInConflict; // only one by one;");
        //    tFile.AppendLine("//                  $TokenMajor;");
        //    tFile.AppendLine("//                  while($tRow = $tResult->fetch_array())");
        //    tFile.AppendLine("//                  {");
        //    tFile.AppendLine("//                      if ($tRow['Token'] == $sToken)");
        //    tFile.AppendLine("//                      {");
        //    tFile.AppendLine("//                          $TokenDate = $tRow['Token'];");
        //    tFile.AppendLine("//                      }");
        //    tFile.AppendLine("//                      else");
        //    tFile.AppendLine("//                      {");
        //    tFile.AppendLine("//                          $TokenInConflict[] = $tRow['Token'];");
        //    tFile.AppendLine("//                      }");
        //    tFile.AppendLine("//                      if ($tRow['Token'] > $LastTokenDate)");
        //    tFile.AppendLine("//                      {");
        //    tFile.AppendLine("//                          $LastTokenDate = $tRow['Token'];");
        //    tFile.AppendLine("//                          $TokenMajor = $tRow['Token'];");
        //    tFile.AppendLine("//                      }");
        //    tFile.AppendLine("//                  }");
        //    tFile.AppendLine("//                  if ($LastTokenDate == $TokenDate)");
        //    tFile.AppendLine("//                  {");
        //    tFile.AppendLine("//                          // ok I have the last token but another session is working …");
        //    tFile.AppendLine("//                      error('RQT93',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("//                  }");
        //    tFile.AppendLine("//                  else");
        //    tFile.AppendLine("//                  {");
        //    tFile.AppendLine("//                      error('RQT94',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("//                  }");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("mysqli_free_result($tResult);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("// If no token for this UUID : new UUID connexion => valid");
        //    tFile.AppendLine("// If the token is unique (of course the last) => valid");
        //    tFile.AppendLine("// If token is not unique => not valid");
        //    tFile.AppendLine("// If token is the last : error close the other session or delete this session");
        //    tFile.AppendLine("// If token is not the last : error close the other session");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("?>");
        //    string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
        //    sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_REQUEST_TOKEN_PHP, tFileFormatted);
        //    //NWEBenchmark.Finish();
        //}
        //-------------------------------------------------------------------------------------------------------------
        //private void CreatePHP_StaticRescueFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        //{
        //    //NWEBenchmark.Start();
        //    StringBuilder tFile = new StringBuilder(string.Empty);
        //    tFile.AppendLine("<?php");
        //    tFile.AppendLine(Headlines());
        //    tFile.AppendLine("// RESCUE");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("$NWD_TMA = microtime(true);");
        //    tFile.AppendLine(""+NWD.K_PHP_TIME_SYNC+" = $NWD_TMA;");
        //    tFile.AppendLine("include_once ("+NWD.K_PATH_BASE+".'/" + Environment + "/" + NWD.K_ENG + "/" + NWD.K_CONSTANTS_FILE + "');");
        //    tFile.AppendLine("include_once ("+NWD.K_PATH_BASE+".'/" + Environment + "/" + NWD.K_ENG + "/" + NWD.K_STATIC_ERROR_PHP + "');");
        //    tFile.AppendLine("include_once ("+NWD.K_PATH_BASE+".'/" + Environment + "/" + NWD.K_ENG + "/" + NWD.K_STATIC_FUNCTIONS_PHP + "');");
        //    tFile.AppendLine("include_once ("+NWD.K_PATH_BASE+".'/" + Environment + "/" + NWD.K_ENG + "/" + NWD.K_STATIC_VALUES_PHP + "');");
        //    tFile.AppendLine("include_once ("+NWD.K_PATH_BASE+".'/" + Environment + "/" + NWD.K_DB + "/NWDAccount/" + NWD.K_WS_SYNCHRONISATION + "');");
        //    tFile.AppendLine("$ereg_email = '/^([A-Z0-9a-z\\.\\_\\%\\+\\-]+@[A-Z0-9a-z\\.\\_\\%\\+\\-]+\\.[A-Za-z]{2,6})$/';");
        //    tFile.AppendLine("$ereg_password = '/^(.{24,64})$/';");
        //    tFile.AppendLine("$ereg_emailHash = '/^(.{24,64})$/';");
        //    tFile.AppendLine("$ereg_lang = '/^([A-Z\\_\\-a-z]{2,7})$/';");
        //    tFile.AppendLine(""+NWD.K_SQL_CON+" = new mysqli($SQL_HOT, $SQL_USR, $SQL_PSW, $SQL_BSE);");
        //    tFile.AppendLine("if ("+NWD.K_SQL_CON+"->connect_errno)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("exit;");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if (getValue ('lang', '"+NWD.K_WEB_HEADER_LANG_KEY+"', $ereg_lang, 'RES02', 'RES12')) // I test emailrescue");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if (getValue ('s', 's', $ereg_emailHash, 'RES03', 'RES13')) // I test emailrescue");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if (getValue ('emailrescue', 'emailrescue', $ereg_email, 'RES01', 'RES11')) // I test emailrescue");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$emailhash = sha1 ($emailrescue.$NWD_SLT_STR);");
        //    tFile.AppendLine("$tQuery = 'SELECT * FROM `'."+NWD.K_ENV+".'_NWDAccount` WHERE `ServerHash` = \\''."+NWD.K_SQL_CON+"->real_escape_string($s).'\\' AND `Email` = \\''."+NWD.K_SQL_CON+"->real_escape_string($emailhash).'\\' AND `AC` = 1;';");
        //    tFile.AppendLine("$tResult = "+NWD.K_SQL_CON+"->query($tQuery);");
        //    tFile.AppendLine("if (!$tResult)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// error('SGN70',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("if ($tResult->num_rows == 0)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// unknow user");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else if ($tResult->num_rows == 1)");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("while($tRow = $tResult->fetch_array())");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// respondAdd('rescue',true);");
        //    tFile.AppendLine("// ok I have one user");
        //    tFile.AppendLine("//TODO: send an email and process to change the password");
        //    tFile.AppendLine("$tSeed = str_split('ACDEFHJKLMNPRTUVWXY3479'); // and any other characters");
        //    tFile.AppendLine("shuffle($tSeed); // probably optional since array_is randomized; this may be redundant");
        //    tFile.AppendLine("$NewPassWord = '';");
        //    tFile.AppendLine("foreach (array_rand($tSeed, 12) as $k) ");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$NewPassWord.= $tSeed[$k];");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("$NewPassWordHash = sha1 ($NewPassWord.$NWD_SLT_END);");
        //    tFile.AppendLine("//$tQueryC = 'UPDATE `'."+NWD.K_ENV+".'_NWDAccount` SET `ServerHash` = \\'\\', `Password` = \\''.$NewPassWordHash.'\\', `DM` = \\''."+NWD.K_PHP_TIME_SYNC+".'\\', `DS` = \\''."+NWD.K_PHP_TIME_SYNC+".'\\', `'."+NWD.K_ENV+".'Sync` = \\''."+NWD.K_PHP_TIME_SYNC+".'\\' WHERE `Reference` = \\''."+NWD.K_SQL_CON+"->real_escape_string($tRow['Reference']).'\\' AND `AC` = 1;';");
        //    tFile.AppendLine("// //echo $tQueryC;");
        //    tFile.AppendLine("// $tResultC = "+NWD.K_SQL_CON+"->query($tQueryC);");
        //    tFile.AppendLine("// if (!$tResultC)");
        //    tFile.AppendLine("// {");
        //    tFile.AppendLine("//  // error('SGN03',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("// }");
        //    tFile.AppendLine("// IntegrityNWDAccountReevalue ($tRow['Reference']);");
        //    tFile.AppendLine("$tError = errorReference('ERR-RESCUE-03');");
        //    tFile.AppendLine("if (isset($tError['Title']))");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$subject = str_replace(\"{APP}\",$NWD_APP_NAM,GetLocalizableString($tError['Title'], $lang));");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$subject = $NWD_APP_NAM.': password';");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("if (isset($tError['Description']))");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$message = str_replace(\"{PASSWORD}\",$NewPassWord,str_replace(\"{APP}\",$NWD_APP_NAM,GetLocalizableString($tError['Description'], $lang)));");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("$message =\"Your password was resseted to: $NewPassWord\";");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("include('Mail.php');");
        //    tFile.AppendLine("$headers['From'] = $SMTP_REPLY;");
        //    tFile.AppendLine("$headers['To'] = $emailrescue;");
        //    tFile.AppendLine("$headers['Subject'] =$subject;");
        //    tFile.AppendLine("$params['sendmail_path'] = '/usr/lib/sendmail';");
        //    tFile.AppendLine("// Create the mail object using the Mail::factory method");
        //    tFile.AppendLine("$mail_object = Mail::factory('smtp', array ('host' => $SMTP_HOST, ");
        //    tFile.AppendLine("'auth' => true, ");
        //    tFile.AppendLine("'username' => $SMTP_USER, ");
        //    tFile.AppendLine("'password' => $SMTP_PSW));");
        //    tFile.AppendLine("$mail_object->send($emailrescue, $headers, $message);");
        //    tFile.AppendLine("$tHTML = errorReference('ERR-RESCUE-02');");
        //    tFile.AppendLine("?><!DOCTYPE html PUBLIC \" -//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
        //    tFile.AppendLine("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"fr\">");
        //    tFile.AppendLine("<head>");
        //    tFile.AppendLine("<title><?php");
        //    tFile.AppendLine("if (isset($tHTML['Title']))");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("echo(str_replace(\"{APP}\",$NWD_APP_NAM,GetLocalizableString($tHTML['Title'], $lang)));");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("echo('Your password was reseted!');");
        //    tFile.AppendLine("}?></title>");
        //    tFile.AppendLine("<meta http-equiv=\"Content-Type\" content=\"text / html; charset = UTF - 8\" />");
        //    tFile.AppendLine("<meta http-equiv=\"Content-Language\" content=\"en\" />");
        //    tFile.AppendLine("<head>");
        //    tFile.AppendLine("<body>");
        //    tFile.AppendLine("<div>");
        //    tFile.AppendLine("<?php ");
        //    tFile.AppendLine("if (isset($tHTML['Description']))");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("echo(str_replace(\"{APP}\",$NWD_APP_NAM,GetLocalizableString($tHTML['Description'], $lang)));");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("echo('Your password was reseted!');");
        //    tFile.AppendLine("}?>");
        //    tFile.AppendLine("</div>");
        //    tFile.AppendLine("</body>");
        //    tFile.AppendLine("</html><?php");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else //or more than one user with this email … strange… I push an error, user must be unique");
        //    tFile.AppendLine("{");
        //    tFile.AppendLine("// to much users ...");
        //    tFile.AppendLine("// error('SGN72',true, __FILE__, __FUNCTION__, __LINE__);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("mysqli_free_result($tResult);");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else{");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("else{");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine("}");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("?>");
        //    string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
        //    sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_RESCUE_PHP, tFileFormatted);
        //    //NWEBenchmark.Finish();
        //}
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticRespondFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {
            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// RESPOND");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("global " + NWD.K_PHP_TIME_SYNC + ";");
            tFile.AppendLine("global $TIME_MICRO;");
            tFile.AppendLine("global $CHANGE_USER;");
            tFile.AppendLine("$CHANGE_USER = false;");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// datas output");
            tFile.AppendLine("$REP;");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get timestamp of server compute");
            tFile.AppendLine("$REP['timestamp'] = " + NWD.K_PHP_TIME_SYNC + ";");
            tFile.AppendLine("$REP['timemicro'] = $TIME_MICRO;");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondIsset($sKey)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("return isset($REP[$sKey]);");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondAdd($sKey, $sValue)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("$REP[$sKey] = $sValue;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondRemove($sKey)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("if (isset($REP[$sKey]))");
            tFile.AppendLine("{");
            tFile.AppendLine("unset($REP[$sKey]);");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondUUID($sValue)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP, $uuid;");
            tFile.AppendLine("$uuid = $sValue;");
            tFile.AppendLine("$REP['" + NWD.UUIDKey + "'] = $sValue;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondToken($sValue)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP, $token;");
            tFile.AppendLine("$token = $sValue;");
            tFile.AppendLine("$REP['" + NWD.RequestTokenKey + "'] = $sValue;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondNeedReloadData()");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("$REP['reloaddatas'] = true;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respondNewUser()");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("$REP['newuser'] = true;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);




            //tFile.AppendLine("function respond_SignOut()");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $REP;");
            //tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_SIGNOUT_KEY + "'] = true;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            //tFile.AppendLine("function respond_SignIn()");
            //tFile.AppendLine("{");
            //tFile.AppendLine("global $REP;");
            //tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_SIGNIN_KEY + "'] = true;");
            //tFile.AppendLine("}");
            //tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respond_RestartWebService()");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_RESTART_WEBSERVICE_KEY + "'] = true;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respond_UserTransfert($sOldReference, $sNewReference)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_USER_TRANSFERT_KEY + "'] = true;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_NEW_USER_KEY + "'] = true;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_OLD_USER_KEY + "'] = $sOldReference;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_REPLACE_USER_KEY + "'] = $sNewReference;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);

            tFile.AppendLine("function respond_ChangeUser($sOldReference, $sNewReference)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $REP;");
            tFile.AppendLine("global $CHANGE_USER;");
            tFile.AppendLine("$CHANGE_USER = true;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_NEW_USER_KEY + "'] = true;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_OLD_USER_KEY + "'] = $sOldReference;");
            tFile.AppendLine("$REP['" + NWD.K_WEB_ACTION_REPLACE_USER_KEY + "'] = $sNewReference;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);











            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_RESPOND_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticStartFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {
            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// START");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("$TIME_MICRO = microtime(true); // perhaps use in instance of $TIME_STAMP in sync ");
            tFile.AppendLine("settype($TIME_MICRO, \"float\");");
            tFile.AppendLine("" + NWD.K_PHP_TIME_SYNC + " = intval($TIME_MICRO);");
            tFile.AppendLine("settype(" + NWD.K_PHP_TIME_SYNC + ", \"integer\");");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// use functions library");
            tFile.AppendLine("include_once ($PATH_BASE.'/" + Environment + "/" + NWD.K_ENG + "/" + NWD.K_STATIC_FUNCTIONS_PHP + "');");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// connect MYSQL");
            tFile.AppendLine("" + NWD.K_SQL_CON + " = new mysqli($SQL_HOT,$SQL_USR,$SQL_PSW, $SQL_BSE);");
            tFile.AppendLine("if (" + NWD.K_SQL_CON + "->connect_errno)");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SQL00));
            tFile.AppendLine("include_once ('" + NWD.K_STATIC_FINISH_PHP + "');");
            tFile.AppendLine("exit;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("// analyze request");
            tFile.AppendLine("include_once ('" + NWD.K_STATIC_REQUEST_PHP + "');");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_START_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        private void CreatePHP_StaticValuesFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        {
            //NWEBenchmark.Start();
            StringBuilder tFile = new StringBuilder(string.Empty);
            tFile.AppendLine("<?php");
            tFile.AppendLine(Headlines());
            tFile.AppendLine("// VALUES");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// datas input");
            tFile.AppendLine("$dico;");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// aes128 Encrypt");
            tFile.AppendLine("function aes128Encrypt($sData, $sKey, $sVector) {");
            tFile.AppendLine("return base64_encode(openssl_encrypt($sData, 'AES-128-ECB', $sKey, OPENSSL_RAW_DATA));");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// aes128 Decrypt");
            tFile.AppendLine("function aes128Decrypt($sData, $sKey, $sVector) {");
            tFile.AppendLine("return openssl_decrypt(base64_decode($sData), 'AES-128-ECB', $sKey, OPENSSL_RAW_DATA);");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// create salt temporal for hash analyze");
            tFile.AppendLine("function saltTemporal($sFrequence, $sIndex) {");
            tFile.AppendLine("if ($sFrequence < 0 || $sFrequence >= 3600)");
            tFile.AppendLine("{");
            tFile.AppendLine("$sFrequence = 600;");
            tFile.AppendLine("}");
            tFile.AppendLine("$unixTime = time()+$sIndex*$sFrequence; // use time() exceptional");
            tFile.AppendLine("return ($unixTime-($unixTime%$sFrequence));");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get value of key in JSON dico and create variable with this name");
            tFile.AppendLine("function paramValue ($varName, $key, $ereg, $errStringIfempty, $errStringifInvalid)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $$varName,$dico;");
            tFile.AppendLine("$return = true;");
            tFile.AppendLine("$$varName = NULL;");
            tFile.AppendLine("$rValue = isset($dico[$key]) ? $dico[$key] : '';// in place of $dico[$key];");
            tFile.AppendLine("if (valueValidity($key, $rValue, $ereg, $errStringIfempty, $errStringifInvalid))");
            tFile.AppendLine("{");
            tFile.AppendLine("$$varName = $rValue;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = false;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $return;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get POST JSON value by key");
            tFile.AppendLine("function getParams($sKey, $sDigest,$sBase64, $sCrypted) {");
            tFile.AppendLine("global $dico, $NWD_SHA_SEC, $NWD_SHA_VEC, $NWD_SLT_STR, $NWD_SLT_END;");
            tFile.AppendLine("$rReturn = true;");
            tFile.AppendLine("$tParam = isset($_POST[$sKey]) ? $_POST[$sKey] : '';");
            tFile.AppendLine("$tDigest = isset($_POST[$sDigest]) ? $_POST[$sDigest] : '';");
            tFile.AppendLine("if ($tParam!='')");
            tFile.AppendLine("{");
            tFile.AppendLine("if (sha1($NWD_SLT_STR.$tParam.$NWD_SLT_END) == $tDigest)");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($sCrypted==true)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tParam = aes128Decrypt( $tParam, $NWD_SHA_SEC, $NWD_SHA_VEC);");
            tFile.AppendLine("if ( $tParam == NULL)");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            //tFile.AppendLine("errorInfos('PAR97','Data '.$sKey.' is not an json valid!');");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($sBase64==true)");
            tFile.AppendLine("{");
            tFile.AppendLine("$tParam = urldecode(base64_decode($tParam));");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("if (!" + NWDError.PHP_errorDetected() + "())");
            tFile.AppendLine("{");
            tFile.AppendLine("$tDico = json_decode($tParam, true);");
            tFile.AppendLine("if ($tDico == NULL)");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = false;");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            //tFile.AppendLine("errorInfos('PAR99','Data '.$sKey.' is not an json valid!');");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$dico = $tDico;");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = false;");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            //tFile.AppendLine("errorInfos('PAR98','Digest for '.$sKey.' is false');");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$rReturn = false;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $rReturn;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get HEADER value brutal");
            tFile.AppendLine("function headerBrutalValue ($sVarName, $sKey)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $$sVarName;");
            tFile.AppendLine("$$sVarName = isset($_SERVER['HTTP_'.strtoupper($sKey)]) ? $_SERVER['HTTP_'.strtoupper($sKey)] : '';// in place of $_SERVER[$sKey];");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get HEADER value");
            tFile.AppendLine("function headerValue ($sVarName, $sKey, $sEreg, $sErrStringIfempty, $sErrStringifInvalid)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $$sVarName;");
            tFile.AppendLine("$tReturn = true;");
            tFile.AppendLine("$$sVarName = NULL;");
            tFile.AppendLine("$tReturn = isset($_SERVER['HTTP_'.strtoupper($sKey)]) ? $_SERVER['HTTP_'.strtoupper($sKey)] : '';// in place of $_SERVER[$sKey];");
            tFile.AppendLine("if (valueValidity($sKey, $tReturn, $sEreg, $sErrStringIfempty, $sErrStringifInvalid))");
            tFile.AppendLine("{");
            tFile.AppendLine("$$sVarName = $tReturn;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$tReturn = false;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $tReturn;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get POST value");
            tFile.AppendLine("function postValue ($varName, $key, $ereg, $errStringIfempty, $errStringifInvalid)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $$varName;");
            tFile.AppendLine("$return = true;");
            tFile.AppendLine("$$varName = NULL;");
            tFile.AppendLine("$return = isset($_POST[$key]) ? $_POST[$key] : '';// in place of $_POST[$key];");
            tFile.AppendLine("if (valueValidity($key, $return, $ereg, $errStringIfempty, $errStringifInvalid))");
            tFile.AppendLine("{");
            tFile.AppendLine("$$varName = $return;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = false;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $return;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("// get GET value");
            tFile.AppendLine("function getValue ($varName, $key, $ereg, $errStringIfempty, $errStringifInvalid)");
            tFile.AppendLine("{");
            tFile.AppendLine("global $$varName;");
            tFile.AppendLine("$return = true;");
            tFile.AppendLine("$$varName = NULL;");
            tFile.AppendLine("$return = isset($_GET[$key]) ? $_GET[$key] : '';// in place of $_GET[$key];");
            tFile.AppendLine("if (valueValidity($key, $return, $ereg, $errStringIfempty, $errStringifInvalid))");
            tFile.AppendLine("{");
            tFile.AppendLine("$$varName = $return;");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = false;");
            tFile.AppendLine("}");
            tFile.AppendLine("return $return;");
            tFile.AppendLine("}");
            tFile.AppendLine("// -----------------");
            tFile.AppendLine("// validity of value by ereg");
            tFile.AppendLine("function valueValidity ($key, $value, $ereg, $errStringIfempty, $errStringifInvalid)");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = true;");
            tFile.AppendLine("if ($value == '' && $errStringIfempty != '')");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = false;");
            tFile.AppendLine("if ($errStringIfempty != '')");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            //tFile.AppendLine("errorInfos($errStringIfempty,'Value validity of `'.$key.'` (=`'.$value.'`) is empty and it is not possible');");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("else");
            tFile.AppendLine("{");
            tFile.AppendLine("if ($ereg!='' && $errStringifInvalid!='')");
            tFile.AppendLine("{");
            tFile.AppendLine("if (!preg_match ($ereg, $value))");
            tFile.AppendLine("{");
            tFile.AppendLine("$return = false;");
            tFile.AppendLine("if ($errStringifInvalid != '')");
            tFile.AppendLine("{");
            tFile.AppendLine(NWDError.PHP_Error(NWDError.NWDError_SERVER));
            //tFile.AppendLine("errorInfos($errStringifInvalid,'Value validity of `'.$key.'` (=`'.$value.'`) is not complicent with regular expression rules');");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("}");
            tFile.AppendLine("return $return;");
            tFile.AppendLine("}");
            tFile.AppendLine(NWD.K_CommentSeparator);
            tFile.AppendLine("?>");
            string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
            sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_VALUES_PHP, tFileFormatted);
            //NWEBenchmark.Finish();
        }
        //-------------------------------------------------------------------------------------------------------------
        //private void CreatePHPFlashMyAppFile(Dictionary<string, string> sFilesAndDatas, bool sWriteOnDisk = true)
        //{
        //    //NWEBenchmark.Start();
        //    // TODO Don't forget to create CSS
        //    StringBuilder tFile = new StringBuilder(string.Empty);
        //    tFile.AppendLine("<?php");
        //    tFile.AppendLine(Headlines());
        //    tFile.AppendLine("// FLASH MY APP");
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    // TODO REDIRECT TO FlashMyApp.com!!! AND FINISH FLASHMYAPP.COM
        //    tFile.AppendLine(NWD.K_CommentSeparator);
        //    tFile.AppendLine("?>");
        //    string tFileFormatted = NWDToolbox.CSharpFormat(tFile.ToString());
        //    sFilesAndDatas.Add(EngFolder(sWriteOnDisk) + NWD.K_STATIC_FLASH_PHP, tFileFormatted);
        //    //NWEBenchmark.Finish();
        //}
        //-------------------------------------------------------------------------------------------------------------
    }
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}
//=====================================================================================================================
#endif
