//=====================================================================================================================
//
//  ideMobi 2020©
//
//=====================================================================================================================
// Define the use of Log and Benchmark only for this file!
// Add NWD_VERBOSE in scripting define symbols (Edit->Project Settings…->Player->[Choose Plateform]->Other Settings->Scripting Define Symbols)
#if NWD_VERBOSE
#if UNITY_EDITOR
#define NWD_LOG
#define NWD_BENCHMARK
#elif DEBUG
//#define NWD_LOG
//#define NWD_BENCHMARK
#endif
#else
#undef NWD_LOG
#undef NWD_BENCHMARK
#endif
//=====================================================================================================================
#if NWD_RGPD
//=====================================================================================================================
namespace NetWorkedData
{
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public partial class NWDAccountConsent : NWDBasisAccountDependent
    {
        //-------------------------------------------------------------------------------------------------------------
        public NWDAccountConsent()
        {
            //Debug.Log("NWDUserConsent Constructor");
        }
        //-------------------------------------------------------------------------------------------------------------
        public NWDAccountConsent(bool sInsertInNetWorkedData) : base(sInsertInNetWorkedData)
        {
            //Debug.Log("NWDUserConsent Constructor with sInsertInNetWorkedData : " + sInsertInNetWorkedData.ToString() + "");
        }
        //-------------------------------------------------------------------------------------------------------------
        public bool ConsentIsValid()
        {
            bool rReturn = true;
            NWDConsent tAppConsent = Consent.GetRawData();
            if (tAppConsent != null)
            {
                switch (Consent.GetRawData().ExpectedState)
                {
                    case NWESwitchState.On:
                        {
                            if (Authorization != NWESwitchState.On)
                            {
                                rReturn = false;
                                break;
                            }
                        }
                        break;
                    case NWESwitchState.Off:
                        {
                            if (Authorization != NWESwitchState.Off)
                            {
                                rReturn = false;
                                break;
                            }
                        }
                        break;
                    case NWESwitchState.Unknow:
                        {
                            // no necessary spect
                        }
                        break;
                }
            }
            return rReturn;
        }
        //-------------------------------------------------------------------------------------------------------------
        public static NWDAccountConsent ForConsent(NWDConsent sAppConsent, bool sCreateIfNull = true)
        {
            NWDAccountConsent rUserConsent = null;
            foreach (NWDAccountConsent tAuthorization in NWDBasisHelper.GetReachableDatas<NWDAccountConsent>())
            {
                if (tAuthorization.Consent.GetRawData() == sAppConsent && tAuthorization.Version.GetValue() == sAppConsent.Version.GetValue())
                {
                    rUserConsent = tAuthorization;
                    break;
                }
            }

            if (rUserConsent == null && sCreateIfNull)
            {
                rUserConsent = NWDBasisHelper.NewData<NWDAccountConsent>();
                #if UNITY_EDITOR
                rUserConsent.InternalKey = sAppConsent.InternalKey;
#if NWD_ACCOUNT_IDENTITY
                rUserConsent.InternalDescription = NWDAccountNickname.GetNickname() + " - " + sAppConsent.Version;
#endif
                #endif
                rUserConsent.Tag = NWDBasisTag.TagUserCreated; // Data generated by User-created
                rUserConsent.Consent.SetReference(sAppConsent.Reference);
                rUserConsent.Version.SetValue(sAppConsent.Version.GetValue());
                rUserConsent.Authorization = NWESwitchState.Unknow;
                rUserConsent.UpdateData();
            }
            return rUserConsent;
        }
        //-------------------------------------------------------------------------------------------------------------
        public void SetAuthorization(NWESwitchState sStat)
        {
            Authorization = sStat;
            UpdateData();
            NWENotificationManager.SharedInstance().PostNotification(null, NWDConsent.K_APPCONSENTS_CHANGED);
        }
        //-------------------------------------------------------------------------------------------------------------
    }
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}
//=====================================================================================================================
#endif